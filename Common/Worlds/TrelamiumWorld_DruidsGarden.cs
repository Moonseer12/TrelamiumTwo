using System;
using System.Collections.Generic;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Terraria.World.Generation;
using Terraria.GameContent.Generation;
using Microsoft.Xna.Framework;

namespace TrelamiumTwo.Common.Worlds
{
    public class DruidsGarden : ModWorld
    {
        public override void ModifyWorldGenTasks(List<GenPass> tasks, ref float totalWeight)
        {
            int DruidsGardenIndex = tasks.FindIndex(genpass => genpass.Name.Equals("Stalac"));
            if (DruidsGardenIndex != -1)
            {
                tasks.Insert(DruidsGardenIndex + 1, new PassLegacy("DG Tree Generation", delegate (GenerationProgress progress)
                {
                    progress.Message = "Planting Druid's Garden Tree...";
					DG_Tree(Main.spawnTileX - 400, Main.spawnTileY - 50);
					DG_TreeWall(Main.spawnTileX - 400, Main.spawnTileY - 50);
				}));
            }
        }
		private void DG_Tree(int spawnX, int spawnY)
		{
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,1,1,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,1,2,1,1,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,1,1,1,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,1,1,1,1,1,3,0,0,0,0,0,0,0},
				{0,0,0,1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,3,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,1,3,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,3,1,1,0,1,2,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,1,1,3,0,0,0,0,0,0,0,0},
				{0,0,3,0,0,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,0,0,0,0,0,0,0,0},
				{0,0,3,0,1,1,1,1,2,0,9,0,7,0,8,0,0,5,0,0,6,0,0,0,3,0,3,0,0,0,0,0,0,0,0},
				{0,0,3,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,0,0,3,0,3,0,0,0,0,0,0,0,0},
				{0,0,3,0,0,1,1,1,1,2,2,2,2,1,2,2,2,2,2,0,0,0,10,0,3,0,0,0,0,0,0,0,0,0,0},
				{0,0,3,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,11,0,0,0,10,12,12,13,0,0,0,0,0,0,0,0},
				{0,0,3,0,0,0,0,3,1,1,3,3,1,1,1,1,0,2,2,2,14,1,1,1,1,1,1,1,12,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,3,0,0,3,3,0,1,3,0,0,2,2,2,2,2,1,1,2,2,2,1,1,1,3,0,0,0,0},
				{0,0,0,0,0,0,0,3,0,0,3,3,0,0,3,0,0,2,2,0,15,2,2,2,2,1,1,1,16,3,3,0,0,0,0},
				{0,0,0,0,0,0,0,3,0,0,3,3,0,0,3,0,0,2,2,0,3,1,1,1,1,1,1,3,3,3,3,0,0,0,0},
				{0,0,0,0,0,0,0,3,0,0,3,0,0,0,3,0,0,2,2,0,0,3,3,1,1,1,3,3,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,2,2,0,0,3,0,0,1,1,3,0,0,3,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,2,2,0,0,3,0,0,0,0,3,3,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,2,2,0,0,3,0,0,0,0,0,3,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,2,1,1,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,11,0,2,2,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,2,0,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,1,1,1,3,0,0,15,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,3,3,3,1,1,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,3,0,3,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,3,0,3,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,18,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,0,17,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,0,0,3,17,17,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,17,0,0,0,17,0,0,0,17,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,17,17,0,0,17,0,0,0,17,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,17,17,0,0,0,17,0,0},
				{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,17,0,0,17,17,0,0},
				{0,0,0,0,1,1,0,0,0,0,0,0,20,2,14,0,0,0,0,0,0,0,0,17,17,0,0,17,17,17,0,17,17,17,21},
				{0,0,0,0,1,1,22,22,22,22,22,23,23,23,2,2,14,0,0,0,19,0,21,23,23,23,23,23,23,23,23,23,23,23,23},
				{0,0,0,0,1,1,24,24,24,24,25,23,26,26,2,2,2,2,2,23,23,23,23,23,26,26,26,26,26,26,26,26,26,26,26},
				{25,24,24,1,1,1,1,24,24,25,23,26,26,26,26,26,2,2,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26}
			};
			int PosX = spawnX - 0;
			int PosY = spawnY - 0;
			for (int confirmPlatforms = 0; confirmPlatforms < 2; confirmPlatforms++)
			{
				for (int i = 0; i < _structure.GetLength(0); i++)
				{
					for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
					{
						int k = PosX + j;
						int l = PosY + i;
						if (WorldGen.InWorld(k, l, 30))
						{
							Tile tile = Framing.GetTileSafely(k, l);
							switch (_structure[i, j])
							{
								case 0:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
									}
									break;
								case 1:
									tile.active(true);
									tile.type = 192;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 2:
									tile.active(true);
									tile.type = 191;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 3:
									tile.active(true);
									tile.type = 353;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 4:
									if (confirmPlatforms == 0)
										tile.active(false);
									WorldGen.PlaceTile(k, l, 33, true, true, -1, 14);
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 5:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 304, true, true, -1, 0);
									}
									break;
								case 6:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 10, true, true, -1, 7);
									}
									break;
								case 7:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 15, true, true, -1, 5);
									}
									break;
								case 8:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 14, true, true, -1, 6);
									}
									break;
								case 9:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 18, true, true, -1, 26);
									}
									break;
								case 10:
									if (confirmPlatforms == 0)
										tile.active(false);
									WorldGen.PlaceTile(k, l, 19, true, true, -1, 23);
									tile.slope(1);
									tile.halfBrick(false);
									break;
								case 11:
									tile.active(true);
									tile.type = 191;
									tile.slope(1);
									tile.halfBrick(false);
									break;
								case 12:
									tile.active(true);
									tile.type = 192;
									tile.slope(0);
									tile.halfBrick(true);
									break;
								case 13:
									tile.active(true);
									tile.type = 192;
									tile.slope(1);
									tile.halfBrick(false);
									break;
								case 14:
									tile.active(true);
									tile.type = 191;
									tile.slope(0);
									tile.halfBrick(true);
									break;
								case 15:
									tile.active(true);
									tile.type = 191;
									tile.slope(4);
									tile.halfBrick(false);
									break;
								case 16:
									tile.active(true);
									tile.type = 192;
									tile.slope(3);
									tile.halfBrick(false);
									break;
								case 17:
									tile.active(true);
									tile.type = 5;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 18:
									if (confirmPlatforms == 0)
										tile.active(false);
									WorldGen.PlaceTile(k, l, 4, true, true, -1, 0);
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 19:
									if (confirmPlatforms == 1)
									{
										tile.active(false);
										tile.slope(0);
										tile.halfBrick(false);
										WorldGen.PlaceTile(k, l, 27, true, true, -1, 0);
									}
									break;
								case 20:
									tile.active(true);
									tile.type = 191;
									tile.slope(2);
									tile.halfBrick(false);
									break;
								case 21:
									tile.active(true);
									tile.type = 73;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 22:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
										tile.liquid = 253;
										tile.liquidType(0);
									}
									break;
								case 23:
									tile.active(true);
									tile.type = 2;
									tile.slope(0);
									tile.halfBrick(false);
									break;
								case 24:
									if (confirmPlatforms == 0)
									{
										tile.active(false);
										tile.halfBrick(false);
										tile.slope(0);
										tile.liquid = 255;
										tile.liquidType(0);
									}
									break;
								case 25:
									tile.active(true);
									tile.type = 2;
									tile.slope(2);
									tile.halfBrick(false);
									break;
								case 26:
									tile.active(true);
									tile.type = 0;
									tile.slope(0);
									tile.halfBrick(false);
									break;
							}
						}
					}
				}
			}
		}	
		private void DG_TreeWall(int spawnX, int spawnY)
        {
			int[,] _structure = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,1,0,2,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,2,2,2,1,2,1,2,2,2,2,1,1,2,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
				{0,0,1,1,0,0,0,0,1,2,2,2,1,1,1,1,2,2,2,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,1,1,1,1,1,0,0,1,2,2,2,2,2,2,1,2,2,2,2,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0},
				{0,1,0,1,1,1,0,0,0,1,2,2,1,1,2,1,2,2,2,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,2,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,2,2,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,2,2,2,2,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,2,2,2,2,2,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,1,1,1,0,0,3,0,0,0,2,0,2,2,1,0,0,0,3,3,3,3,3,3,3,3,0,1},
				{0,0,0,0,0,0,1,1,1,0,0,0,0,3,3,3,3,2,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}
			};
			int PosX = spawnX - 0;
			int PosY = spawnY - 0;
			for (int i = 0; i < _structure.GetLength(0); i++)
			{
				for (int j = _structure.GetLength(1) - 1; j >= 0; j--)
				{
					int k = PosX + j;
					int l = PosY + i;
					if (WorldGen.InWorld(k, l, 30))
					{
						Tile tile = Framing.GetTileSafely(k, l);
						switch (_structure[i, j])
						{
							case 0:
								tile.wall = 0;
								break;
							case 1:
								tile.wall = 60;
								break;
							case 2:
								tile.wall = 78;
								break;
							case 3:
								tile.wall = 2;
								break;
							case 4:
								tile.wall = 59;
								break;
						}
					}
				}
			}
		}

        public int Raycast(int x, int y)
        {
            if (x < 2 || x > Main.maxTilesX - 2)
            {
                mod.Logger.Error("X is dead.");
                return 0;
            }
            if (y < 2 || y > Main.maxTilesY - 2)
            {
                mod.Logger.Error("Y is not alive");
                return 0;
            }
            while (!Main.tile[x, y].active())
            {
                y++;
            }
            return y;
        }
    }
}